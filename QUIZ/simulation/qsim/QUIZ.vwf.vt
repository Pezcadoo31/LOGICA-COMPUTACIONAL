// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2023 11:48:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          QUIZ
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module QUIZ_vlg_vec_tst();
// constants                                           
// general purpose registers
reg M;
reg P1;
reg P2;
reg P3;
// wires                                               
wire S;

// assign statements (if any)                          
QUIZ i1 (
// port map - connection between master ports and signals/registers   
	.M(M),
	.P1(P1),
	.P2(P2),
	.P3(P3),
	.S(S)
);
initial 
begin 
#1000000 $finish;
end 

// M
always
begin
	M = 1'b0;
	M = #25000 1'b1;
	#25000;
end 

// P1
always
begin
	P1 = 1'b0;
	P1 = #50000 1'b1;
	#50000;
end 

// P2
initial
begin
	repeat(6)
	begin
		P2 = 1'b0;
		P2 = #75000 1'b1;
		# 75000;
	end
	P2 = 1'b0;
	P2 = #75000 1'b1;
end 

// P3
always
begin
	P3 = 1'b0;
	P3 = #100000 1'b1;
	#100000;
end 
endmodule

